GUIType: Engine

People: [Nadja, Charlie, Bryan, Devin, HGCAL_dev]

Board_type:
  - name: Engine V3 Right
    requiredTests: [0, 1, 2, 3, 4]
    type_sn: '100300'
  - name: Engine V3 Left
    requiredTests: [0, 1, 2, 3, 4]
    type_sn: '100310'

DBInfo:
  admin: EngineDBInserter
  baseURL: http://cmslab3.spa.umn.edu/~cros0400/cgi-bin/EngineDB
  inserter: EngineDBInserter
  name: EngineDB
  reader: EngineDBReadUser
  use_database: false


SerialCheckSafe: false
UsingScanner: false

# TestHandler: {name: Local, remoteip: localhost}
# TestHandler: {name: SSH, username: <username>, hostname: <hostname>, remoteip: <remoteip>}
TestHandler: {name: ZMQ, localip: <localip>, remoteip: <remoteip>, username: <username>,
  serverpath: <serverpath>, serverscript: <serverscript>}


Tests: 
  - name: Power-Ground Resistance
    type: physical
    desc_long: Check that the power and grounds are not shorted at the terminal, or
      between the inputs.
    desc_short: Measure resistance between power and ground
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool
    required: 1

  - name: 1.5V Input Check
    type: physical
    desc_long: Check that resistance between across C906 or C908 is non-zero.
    desc_short: Check that the 1.5V input is not shorted.
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - name: 10V Input Check
    type: physical
    desc_long: Check that resistance between across C907 or C909 is non-zero.
    desc_short: Check that the 10V input is not shorted.
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool
    
  - name: 1.2V Output Check
    type: physical
    desc_long: Check that resistance between across C904 or C904 or TP901 is non-zero.
    desc_short: Check that the 1.2V output is not shorted.
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - name: RX 2.5V Output Check 
    type: physical
    desc_long: Check that resistance across C902 is non-zero.
    desc_short: Check that the RX 2.5V output is not shorted.
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - name: TX 2.5V Output Check
    type: physical
    desc_long: Check that resistance across either C903 or TP902 is non-zero.
    desc_short: Check that the TX 2.5V output is not shorted.
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - name: LDO Output
    type: physical
    desc_long: Measure the votlage across either R911 or TP901 and verify that it is appropriate.
    desc_short: Check that the LDO output voltage is around 1.2V
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - name: LinPol RX Check
    type: physical
    desc_long: Check that voltages across either R905 or R902 is 2.5V.
    desc_short: Check that the RX voltage from the linppol is operating correctly
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - name: LinPol TX Check
    type: physical
    desc_long: Measure the voltage across either TP902 or R906 or C903 is 2.5V.
    desc_short: Check that the TX voltage from the linppol is operating correctly
    required: 1
    data_fields: 
        - name: Acceptable Value
          critical: true
          type: bool

  - TestClass: TestXPWR
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_startup.py
    desc_long: Measure using the tester, and should find approximately 1.2V.
    desc_short: Check the the X_PWR voltage is correct.
    name: X_PWR
    required: 1

  - TestClass: TestSetupLpgbt
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_startup.py
    desc_long: Perform nominal setup from BE. Do setup, link trick, setup. Check PUSMStatus
      (0x1d9) reports READY (0x13) for all 3 lpGBTs. Check lpGBTs locked to BE All
      3 RX equal within 200 Hz. Check All 3 RX-DV equal within 200 Hz
    desc_short: Ensure setup can be performed
    name: lpGBT setup
    required: 1

  - TestClass: TestLpgbtId
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_startup.py
    desc_long: Read lpgbt ids
    desc_short: Check ids
    name: LPGBT ID
    required: 1

  - TestClass: TestlpGBTcom
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_startup.py
    desc_long: 'Read and write to lpBGT registers via ICEC. Check DAQ lpGBT read of
      registers via IC. Check Trigger lpGBTs: successful read registers via EC. Ensure
      write and readback to user ID registers (0x004 - 0x007)'
    desc_short: Check operability of lpGBT IC/EC communication
    name: lpGBT IC/EC communication
    required: 1

  - TestClass: TestI2C
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: engine_i2c.py
    desc_long: Check that engine can communicate as an I2C master
    desc_short: Engine can use I2C master
    name: I2C
    required: 1

  - TestClass: TestGpio
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_gpio.py
    desc_long: Read and write to all GPIO channels and verify levels. Write nominal
      configuration and then toggle each line one-by-one and verify change in both
      lpGBT status and voltage level
    desc_short: Check the quality of the GPIOs
    name: GPIO functionality
    required: 1

  - TestClass: TestAdc
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_adc.py
    desc_long: Measure known voltages/resistances. Check measured values for all 4
      gains within tolerances, (only need to do all 4 gains for one measurement).
    desc_short: Check quality of the ADCs
    name: ADC functionality
    required: 1

  - TestClass: TestUplink
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_links.py
    desc_long: PRBS validation from lpGBTs. Check bit error rate below threshold.
    desc_short: Check the quality of the uplinks
    name: Uplink quality
    required: 1

  - TestClass: TestDownlink
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_links.py
    desc_long: Eye opening test. Check eye opening width and height below threshold.
    desc_short: Check the quality of the downlinks
    name: Downlink quality
    required: 1

  - TestClass: TestFC
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_links.py
    desc_long: PRBS validation from and back to ZCU. Check bit error rate below threshold.
    desc_short: Check the quality of the Fast Command path
    name: Fast Command quality
    required: 1

  - TestClass: TestElinkUp
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_links.py
    desc_long: PRBS validation from and back to ZCU. Check bit error rate below threshold.
    desc_short: Check the quality of the elinks
    name: Elink quality
    required: 1

  - TestClass: TestEClockRates
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: test_links.py
    desc_long: Check that all EClocks are running at 320MHz.
    desc_short: Ensure EClock rates are correct
    name: EClock Rates
    required: 1

  - TestClass: TestCrossover
    type: script
    TestPath: /home/test_server/test_code/engine_tests
    TestScript: engine_test_suite.py
    desc_long: PRBS validation from and back to ZCU. Check bit error rate below threshold.
    desc_short: Check the quality of the crossover links
    name: Crossover link quality
    required: 1

